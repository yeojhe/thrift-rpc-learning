/**
 * Autogenerated by Thrift for if/KeyValue.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct key;
struct value;
struct found;
struct value;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_found
#define APACHE_THRIFT_ACCESSOR_found
APACHE_THRIFT_DEFINE_ACCESSOR(found);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
// END declare_enums
// BEGIN forward_declare
namespace kv {
class PutRequest;
class GetResponse;
} // namespace kv
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace kv {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


/** Glean {"file": "if/KeyValue.thrift", "name": "PutRequest", "kind": "struct" } */
class PutRequest final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "KeyValue";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::key,
    ::apache::thrift::ident::value
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = PutRequest;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  PutRequest();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  PutRequest(apache::thrift::FragileConstructor, ::std::string key__arg, ::std::string value__arg);

  PutRequest(PutRequest&&) noexcept;

  PutRequest(const PutRequest& src);


  PutRequest& operator=(PutRequest&&) noexcept;
  PutRequest& operator=(const PutRequest& src);

  ~PutRequest();

 private:
  ::std::string __fbthrift_field_key;
 private:
  ::std::string __fbthrift_field_value;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const PutRequest&) const;
  bool operator<(const PutRequest&) const;

  /** Glean { "field": "key" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> key_ref() const& {
    return {this->__fbthrift_field_key, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "key" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> key_ref() & {
    return {this->__fbthrift_field_key, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "key" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> key_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_key), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "key" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> key() const& {
    return {this->__fbthrift_field_key, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "key" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> key() & {
    return {this->__fbthrift_field_key, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "key" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> key() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_key), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> value_ref() const& {
    return {this->__fbthrift_field_value, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> value_ref() & {
    return {this->__fbthrift_field_value, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> value_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_value), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> value() const& {
    return {this->__fbthrift_field_value, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> value() & {
    return {this->__fbthrift_field_value, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> value() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_value), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "key" } */
  [[deprecated("Use `FOO.key().value()` instead of `FOO.get_key()`")]]
  const ::std::string& get_key() const& {
    return __fbthrift_field_key;
  }

  /** Glean { "field": "key" } */
  [[deprecated("Use `FOO.key().value()` instead of `FOO.get_key()`")]]
  ::std::string get_key() && {
    return static_cast<::std::string&&>(__fbthrift_field_key);
  }

  /** Glean { "field": "key" } */
  template <typename T_PutRequest_key_struct_setter = ::std::string>
  [[deprecated("Use `FOO.key() = BAR` instead of `FOO.set_key(BAR)`")]]
  ::std::string& set_key(T_PutRequest_key_struct_setter&& key_) {
    key_ref() = std::forward<T_PutRequest_key_struct_setter>(key_);
    return __fbthrift_field_key;
  }

  /** Glean { "field": "value" } */
  [[deprecated("Use `FOO.value().value()` instead of `FOO.get_value()`")]]
  const ::std::string& get_value() const& {
    return __fbthrift_field_value;
  }

  /** Glean { "field": "value" } */
  [[deprecated("Use `FOO.value().value()` instead of `FOO.get_value()`")]]
  ::std::string get_value() && {
    return static_cast<::std::string&&>(__fbthrift_field_value);
  }

  /** Glean { "field": "value" } */
  template <typename T_PutRequest_value_struct_setter = ::std::string>
  [[deprecated("Use `FOO.value() = BAR` instead of `FOO.set_value(BAR)`")]]
  ::std::string& set_value(T_PutRequest_value_struct_setter&& value_) {
    value_ref() = std::forward<T_PutRequest_value_struct_setter>(value_);
    return __fbthrift_field_value;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<PutRequest>;
  friend void swap(PutRequest& a, PutRequest& b);
};

template <class Protocol_>
unsigned long PutRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "if/KeyValue.thrift", "name": "GetResponse", "kind": "struct" } */
class GetResponse final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "KeyValue";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::found,
    ::apache::thrift::ident::value
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = GetResponse;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  GetResponse();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  GetResponse(apache::thrift::FragileConstructor, bool found__arg, ::std::string value__arg);

  GetResponse(GetResponse&&) noexcept;

  GetResponse(const GetResponse& src);


  GetResponse& operator=(GetResponse&&) noexcept;
  GetResponse& operator=(const GetResponse& src);

  ~GetResponse();

 private:
  bool __fbthrift_field_found;
 private:
  ::std::string __fbthrift_field_value;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const GetResponse&) const;
  bool operator<(const GetResponse&) const;

  /** Glean { "field": "found" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> found_ref() const& {
    return {this->__fbthrift_field_found, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "found" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> found_ref() & {
    return {this->__fbthrift_field_found, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "found" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> found_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_found), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "found" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> found() const& {
    return {this->__fbthrift_field_found, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "found" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> found() & {
    return {this->__fbthrift_field_found, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "found" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> found() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_found), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> value_ref() const& {
    return {this->__fbthrift_field_value, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> value_ref() & {
    return {this->__fbthrift_field_value, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> value_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_value), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> value() const& {
    return {this->__fbthrift_field_value, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> value() & {
    return {this->__fbthrift_field_value, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "value" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> value() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_value), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "found" } */
  [[deprecated("Use `FOO.found().value()` instead of `FOO.get_found()`")]]
  bool get_found() const;

  /** Glean { "field": "found" } */
  [[deprecated("Use `FOO.found() = BAR` instead of `FOO.set_found(BAR)`")]]
  bool& set_found(bool found_);

  /** Glean { "field": "value" } */
  [[deprecated("Use `FOO.value().value()` instead of `FOO.get_value()`")]]
  const ::std::string& get_value() const& {
    return __fbthrift_field_value;
  }

  /** Glean { "field": "value" } */
  [[deprecated("Use `FOO.value().value()` instead of `FOO.get_value()`")]]
  ::std::string get_value() && {
    return static_cast<::std::string&&>(__fbthrift_field_value);
  }

  /** Glean { "field": "value" } */
  template <typename T_GetResponse_value_struct_setter = ::std::string>
  [[deprecated("Use `FOO.value() = BAR` instead of `FOO.set_value(BAR)`")]]
  ::std::string& set_value(T_GetResponse_value_struct_setter&& value_) {
    value_ref() = std::forward<T_GetResponse_value_struct_setter>(value_);
    return __fbthrift_field_value;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<GetResponse>;
  friend void swap(GetResponse& a, GetResponse& b);
};

template <class Protocol_>
unsigned long GetResponse::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace kv

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::kv::PutRequest, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6299196413059699106;
  static constexpr ::std::string_view definitionKey = {"\x74\x95\xb4\x00\x93\x0f\x54\x0a\xe7\x4e\xff\x34\x36\x0f\x80\x46", 16};
};
template <> struct TSchemaAssociation<::kv::GetResponse, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6299196413059699106;
  static constexpr ::std::string_view definitionKey = {"\xb9\x8e\xa8\x62\x4b\x8c\x1d\x55\x3a\x7c\xe1\xdd\x84\x1a\x2b\x04", 16};
};
} // namespace apache::thrift::detail
