/**
 * Autogenerated by Thrift for if/KeyValue.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "if/gen-cpp2/KeyValueStoreAsyncClient.h"
#include "if/gen-cpp2/KeyValue_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace kv {
class KeyValueStore;
class KeyValueStoreAsyncProcessor;

class KeyValueStoreServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};
} // namespace kv

namespace apache::thrift {
template <>
class ServiceHandler<::kv::KeyValueStore> : public apache::thrift::ServerInterface {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::kv::KeyValueStore>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");

 public:
  std::string_view getGeneratedName() const override { return "KeyValueStore"; }

  typedef ::kv::KeyValueStoreAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
  bool isThriftGenerated() const override final { return true; }
 private:
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const;
 public:

  virtual void sync_put(std::unique_ptr<::kv::PutRequest> /*req*/);
  [[deprecated("Use sync_put instead")]] virtual void put(std::unique_ptr<::kv::PutRequest> /*req*/);
  virtual folly::Future<folly::Unit> future_put(std::unique_ptr<::kv::PutRequest> p_req);
  virtual folly::SemiFuture<folly::Unit> semifuture_put(std::unique_ptr<::kv::PutRequest> p_req);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<void> co_put(std::unique_ptr<::kv::PutRequest> p_req);
  virtual folly::coro::Task<void> co_put(apache::thrift::RequestParams params, std::unique_ptr<::kv::PutRequest> p_req);
#endif
  virtual void async_tm_put(apache::thrift::HandlerCallbackPtr<void> callback, std::unique_ptr<::kv::PutRequest> p_req);
  virtual void sync_get(::kv::GetResponse& /*_return*/, std::unique_ptr<::std::string> /*key*/);
  [[deprecated("Use sync_get instead")]] virtual void get(::kv::GetResponse& /*_return*/, std::unique_ptr<::std::string> /*key*/);
  virtual folly::Future<std::unique_ptr<::kv::GetResponse>> future_get(std::unique_ptr<::std::string> p_key);
  virtual folly::SemiFuture<std::unique_ptr<::kv::GetResponse>> semifuture_get(std::unique_ptr<::std::string> p_key);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::kv::GetResponse>> co_get(std::unique_ptr<::std::string> p_key);
  virtual folly::coro::Task<std::unique_ptr<::kv::GetResponse>> co_get(apache::thrift::RequestParams params, std::unique_ptr<::std::string> p_key);
#endif
  virtual void async_tm_get(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::kv::GetResponse>> callback, std::unique_ptr<::std::string> p_key);
 private:
  static ::kv::KeyValueStoreServiceInfoHolder __fbthrift_serviceInfoHolder;
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_put{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_get{apache::thrift::detail::si::InvocationType::AsyncTm};
};

namespace detail {
template <> struct TSchemaAssociation<::kv::KeyValueStore, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6299196413059699106;
  static constexpr ::std::string_view definitionKey = {"\x63\xe6\xca\x38\xc4\xa4\x5e\xf3\x23\xee\x94\xc9\xe7\xe0\xfe\xb6", 16};
};
}
} // namespace apache::thrift

namespace kv {
using KeyValueStoreSvIf [[deprecated("Use apache::thrift::ServiceHandler<KeyValueStore> instead")]] = ::apache::thrift::ServiceHandler<KeyValueStore>;
} // namespace kv

namespace kv {
class KeyValueStoreSvNull : public ::apache::thrift::ServiceHandler<KeyValueStore> {
 public:
  void put(std::unique_ptr<::kv::PutRequest> /*req*/) override;
  void get(::kv::GetResponse& /*_return*/, std::unique_ptr<::std::string> /*key*/) override;
};

class KeyValueStoreAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessorBase {
 public:
  std::string_view getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = void;
 protected:
  ::apache::thrift::ServiceHandler<::kv::KeyValueStore>* iface_;
 public:
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  void executeRequest(apache::thrift::ServerRequest&& serverRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessorBase::ProcessFuncs<KeyValueStoreAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessorBase::ProcessMap<ProcessFuncs>;
  static const KeyValueStoreAsyncProcessor::ProcessMap& getOwnProcessMap();
 private:
  static const KeyValueStoreAsyncProcessor::ProcessMap kOwnProcessMap_;
 private:
  //
  // Service Methods
  //

  //
  // Method 'put'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_put(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_put(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_put(
      apache::thrift::ContextStack* ctx);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_put(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'put'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'get'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_get(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_get(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_get(
      apache::thrift::ContextStack* ctx,
      ::kv::GetResponse const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_get(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'get'
  //

  //
  // End of Service Methods
  //
 public:
  KeyValueStoreAsyncProcessor(::apache::thrift::ServiceHandler<::kv::KeyValueStore>* iface) :
      iface_(iface) {}
  ~KeyValueStoreAsyncProcessor() override {}
};

} // namespace kv
