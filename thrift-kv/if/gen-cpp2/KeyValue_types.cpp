/**
 * Autogenerated by Thrift for if/KeyValue.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "if/gen-cpp2/KeyValue_types.tcc"
#include "if/gen-cpp2/KeyValue_data.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

[[maybe_unused]] static constexpr std::string_view kModuleName = "KeyValue";



namespace kv {

std::string_view PutRequest::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<PutRequest>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view PutRequest::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<PutRequest>::name;
}

PutRequest::PutRequest(const PutRequest&) = default;
PutRequest& PutRequest::operator=(const PutRequest&) = default;
PutRequest::PutRequest() {
}


PutRequest::~PutRequest() {}

PutRequest::PutRequest([[maybe_unused]] PutRequest&& other) noexcept :
    __fbthrift_field_key(std::move(other.__fbthrift_field_key)),
    __fbthrift_field_value(std::move(other.__fbthrift_field_value)),
    __isset(other.__isset) {
}

PutRequest& PutRequest::operator=([[maybe_unused]] PutRequest&& other) noexcept {
    this->__fbthrift_field_key = std::move(other.__fbthrift_field_key);
    this->__fbthrift_field_value = std::move(other.__fbthrift_field_value);
    __isset = other.__isset;
    return *this;
}


PutRequest::PutRequest(apache::thrift::FragileConstructor, ::std::string key__arg, ::std::string value__arg) :
    __fbthrift_field_key(std::move(key__arg)),
    __fbthrift_field_value(std::move(value__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}

void PutRequest::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_key = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_value = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void PutRequest::__fbthrift_clear_terse_fields() {
}

bool PutRequest::__fbthrift_is_empty() const {
  return false;
}

bool PutRequest::operator==([[maybe_unused]] const PutRequest& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool PutRequest::operator<([[maybe_unused]] const PutRequest& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] PutRequest& a, [[maybe_unused]] PutRequest& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_key, b.__fbthrift_field_key);
  swap(a.__fbthrift_field_value, b.__fbthrift_field_value);
  swap(a.__isset, b.__isset);
}


} // namespace kv


namespace kv {

std::string_view GetResponse::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<GetResponse>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view GetResponse::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<GetResponse>::name;
}

GetResponse::GetResponse(const GetResponse&) = default;
GetResponse& GetResponse::operator=(const GetResponse&) = default;
GetResponse::GetResponse() :
    __fbthrift_field_found() {
}


GetResponse::~GetResponse() {}

GetResponse::GetResponse([[maybe_unused]] GetResponse&& other) noexcept :
    __fbthrift_field_found(std::move(other.__fbthrift_field_found)),
    __fbthrift_field_value(std::move(other.__fbthrift_field_value)),
    __isset(other.__isset) {
}

GetResponse& GetResponse::operator=([[maybe_unused]] GetResponse&& other) noexcept {
    this->__fbthrift_field_found = std::move(other.__fbthrift_field_found);
    this->__fbthrift_field_value = std::move(other.__fbthrift_field_value);
    __isset = other.__isset;
    return *this;
}


GetResponse::GetResponse(apache::thrift::FragileConstructor, bool found__arg, ::std::string value__arg) :
    __fbthrift_field_found(std::move(found__arg)),
    __fbthrift_field_value(std::move(value__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}

void GetResponse::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_found = bool();
  this->__fbthrift_field_value = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void GetResponse::__fbthrift_clear_terse_fields() {
}

bool GetResponse::__fbthrift_is_empty() const {
  return false;
}

bool GetResponse::operator==([[maybe_unused]] const GetResponse& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool GetResponse::operator<([[maybe_unused]] const GetResponse& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


bool GetResponse::get_found() const {
  return __fbthrift_field_found;
}

bool& GetResponse::set_found(bool found_) {
  found_ref() = found_;
  return __fbthrift_field_found;
}

void swap([[maybe_unused]] GetResponse& a, [[maybe_unused]] GetResponse& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_found, b.__fbthrift_field_found);
  swap(a.__fbthrift_field_value, b.__fbthrift_field_value);
  swap(a.__isset, b.__isset);
}


} // namespace kv

namespace kv { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace kv
namespace apache::thrift::detail::annotation {
}
