/**
 * Autogenerated by Thrift for if/KeyValue.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#include "if/gen-cpp2/KeyValueStore.h"
#include "if/gen-cpp2/KeyValueStore.tcc"
#include "if/gen-cpp2/KeyValue_metadata.h"
#include <thrift/lib/cpp2/gen/service_cpp.h>

std::unique_ptr<apache::thrift::AsyncProcessor> apache::thrift::ServiceHandler<::kv::KeyValueStore>::getProcessor() {
  return std::make_unique<::kv::KeyValueStoreAsyncProcessor>(this);
}

apache::thrift::ServiceHandler<::kv::KeyValueStore>::CreateMethodMetadataResult apache::thrift::ServiceHandler<::kv::KeyValueStore>::createMethodMetadata() {
  return ::apache::thrift::detail::ap::createMethodMetadataMap<::kv::KeyValueStoreAsyncProcessor>(getServiceRequestInfoMap().value().get());
}


std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> apache::thrift::ServiceHandler<::kv::KeyValueStore>::getServiceRequestInfoMap() const {
  return __fbthrift_serviceInfoHolder.requestInfoMap();
}

::kv::KeyValueStoreServiceInfoHolder apache::thrift::ServiceHandler<::kv::KeyValueStore>::__fbthrift_serviceInfoHolder;

//
// Service Methods
//

//
// Method 'put'
//

void apache::thrift::ServiceHandler<::kv::KeyValueStore>::put(std::unique_ptr<::kv::PutRequest> /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("put");
}

void apache::thrift::ServiceHandler<::kv::KeyValueStore>::sync_put(std::unique_ptr<::kv::PutRequest> p_req) {
  return put(std::move(p_req));
}

folly::SemiFuture<folly::Unit>
apache::thrift::ServiceHandler<::kv::KeyValueStore>::semifuture_put(std::unique_ptr<::kv::PutRequest> p_req) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_put.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Sync,
      std::memory_order_relaxed);
  sync_put(std::move(p_req));
  return folly::makeSemiFuture();
}

folly::Future<folly::Unit>
apache::thrift::ServiceHandler<::kv::KeyValueStore>::future_put(std::unique_ptr<::kv::PutRequest> p_req) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_put.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::SemiFuture,
      std::memory_order_relaxed);
  return apache::thrift::detail::si::future(
      semifuture_put(std::move(p_req)),
      getInternalKeepAlive());
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<void>
apache::thrift::ServiceHandler<::kv::KeyValueStore>::co_put(std::unique_ptr<::kv::PutRequest> p_req) {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_put.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Future,
      std::memory_order_relaxed);
  folly::throw_exception(apache::thrift::detail::si::UnimplementedCoroMethod::
                             withCapturedArgs<std::unique_ptr<::kv::PutRequest> /*req*/>(std::move(p_req)));
}

folly::coro::Task<void> apache::thrift::ServiceHandler<::kv::KeyValueStore>::co_put(
    apache::thrift::RequestParams /* params */, std::unique_ptr<::kv::PutRequest> p_req) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_put.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Coro,
      std::memory_order_relaxed);
  return co_put(std::move(p_req));
}
#endif // FOLLY_HAS_COROUTINES

void apache::thrift::ServiceHandler<::kv::KeyValueStore>::async_tm_put(
    apache::thrift::HandlerCallbackPtr<void> callback, std::unique_ptr<::kv::PutRequest> p_req) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
#if FOLLY_HAS_COROUTINES
determineInvocationType:
#endif // FOLLY_HAS_COROUTINES
  auto invocationType =
      __fbthrift_invocation_put.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm: {
#if FOLLY_HAS_COROUTINES
        __fbthrift_invocation_put.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::CoroParam,
            std::memory_order_relaxed);
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_put(params, std::move(p_req));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
#else // FOLLY_HAS_COROUTINES
        __fbthrift_invocation_put.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::Future,
            std::memory_order_relaxed);
        [[fallthrough]];
#endif // FOLLY_HAS_COROUTINES
      }
      case apache::thrift::detail::si::InvocationType::Future: {
        auto fut = future_put(std::move(p_req));
        apache::thrift::detail::si::async_tm_future(
            std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture: {
        auto fut = semifuture_put(std::move(p_req));
        apache::thrift::detail::si::async_tm_semifuture(
            std::move(callback), std::move(fut));
        return;
      }
#if FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::CoroParam: {
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_put(params, std::move(p_req));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Coro: {
        auto task = co_put(std::move(p_req));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
#endif // FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::Sync: {
        sync_put(std::move(p_req));
        callback->done();
        return;
      }
      default: {
        folly::assume_unreachable();
      }
    }
#if FOLLY_HAS_COROUTINES
  } catch (apache::thrift::detail::si::UnimplementedCoroMethod& ex) {
    std::tie(p_req) = std::move(ex).restoreArgs<std::unique_ptr<::kv::PutRequest> /*req*/>();
    goto determineInvocationType;
#endif // FOLLY_HAS_COROUTINES
  } catch (...) {
    callback->exception(std::current_exception());
  }
}
//
// End of Method 'put'
//

//
// Method 'get'
//

void apache::thrift::ServiceHandler<::kv::KeyValueStore>::get(::kv::GetResponse& /*_return*/, std::unique_ptr<::std::string> /*key*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("get");
}

void apache::thrift::ServiceHandler<::kv::KeyValueStore>::sync_get(::kv::GetResponse& _return, std::unique_ptr<::std::string> p_key) {
  return get(_return, std::move(p_key));
}

folly::SemiFuture<std::unique_ptr<::kv::GetResponse>>
apache::thrift::ServiceHandler<::kv::KeyValueStore>::semifuture_get(std::unique_ptr<::std::string> p_key) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_get.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Sync,
      std::memory_order_relaxed);
  auto ret = std::make_unique<::kv::GetResponse>();
  sync_get(*ret, std::move(p_key));
  return folly::makeSemiFuture(std::move(ret));
}

folly::Future<std::unique_ptr<::kv::GetResponse>>
apache::thrift::ServiceHandler<::kv::KeyValueStore>::future_get(std::unique_ptr<::std::string> p_key) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_get.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::SemiFuture,
      std::memory_order_relaxed);
  return apache::thrift::detail::si::future(
      semifuture_get(std::move(p_key)),
      getInternalKeepAlive());
}

#if FOLLY_HAS_COROUTINES
folly::coro::Task<std::unique_ptr<::kv::GetResponse>>
apache::thrift::ServiceHandler<::kv::KeyValueStore>::co_get(std::unique_ptr<::std::string> p_key) {
  auto expected{apache::thrift::detail::si::InvocationType::Coro};
  __fbthrift_invocation_get.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Future,
      std::memory_order_relaxed);
  folly::throw_exception(apache::thrift::detail::si::UnimplementedCoroMethod::
                             withCapturedArgs<std::unique_ptr<::std::string> /*key*/>(std::move(p_key)));
}

folly::coro::Task<std::unique_ptr<::kv::GetResponse>> apache::thrift::ServiceHandler<::kv::KeyValueStore>::co_get(
    apache::thrift::RequestParams /* params */, std::unique_ptr<::std::string> p_key) {
  auto expected{apache::thrift::detail::si::InvocationType::CoroParam};
  __fbthrift_invocation_get.compare_exchange_strong(
      expected,
      apache::thrift::detail::si::InvocationType::Coro,
      std::memory_order_relaxed);
  return co_get(std::move(p_key));
}
#endif // FOLLY_HAS_COROUTINES

void apache::thrift::ServiceHandler<::kv::KeyValueStore>::async_tm_get(
    apache::thrift::HandlerCallbackPtr<std::unique_ptr<::kv::GetResponse>> callback, std::unique_ptr<::std::string> p_key) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
#if FOLLY_HAS_COROUTINES
determineInvocationType:
#endif // FOLLY_HAS_COROUTINES
  auto invocationType =
      __fbthrift_invocation_get.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm: {
#if FOLLY_HAS_COROUTINES
        __fbthrift_invocation_get.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::CoroParam,
            std::memory_order_relaxed);
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_get(params, std::move(p_key));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
#else // FOLLY_HAS_COROUTINES
        __fbthrift_invocation_get.compare_exchange_strong(
            invocationType,
            apache::thrift::detail::si::InvocationType::Future,
            std::memory_order_relaxed);
        [[fallthrough]];
#endif // FOLLY_HAS_COROUTINES
      }
      case apache::thrift::detail::si::InvocationType::Future: {
        auto fut = future_get(std::move(p_key));
        apache::thrift::detail::si::async_tm_future(
            std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture: {
        auto fut = semifuture_get(std::move(p_key));
        apache::thrift::detail::si::async_tm_semifuture(
            std::move(callback), std::move(fut));
        return;
      }
#if FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::CoroParam: {
        apache::thrift::RequestParams params{
            callback->getRequestContext(),
            callback->getThreadManager_deprecated(),
            callback->getEventBase(),
            callback->getHandlerExecutor()};
        auto task = co_get(params, std::move(p_key));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Coro: {
        auto task = co_get(std::move(p_key));
        apache::thrift::detail::si::async_tm_coro(
            std::move(callback), std::move(task));
        return;
      }
#endif // FOLLY_HAS_COROUTINES
      case apache::thrift::detail::si::InvocationType::Sync: {
        ::kv::GetResponse _return;
        sync_get(_return, std::move(p_key));
        callback->result(std::move(_return));
        return;
      }
      default: {
        folly::assume_unreachable();
      }
    }
#if FOLLY_HAS_COROUTINES
  } catch (apache::thrift::detail::si::UnimplementedCoroMethod& ex) {
    std::tie(p_key) = std::move(ex).restoreArgs<std::unique_ptr<::std::string> /*key*/>();
    goto determineInvocationType;
#endif // FOLLY_HAS_COROUTINES
  } catch (...) {
    callback->exception(std::current_exception());
  }
}
//
// End of Method 'get'
//

//
// End of Service Methods
//


namespace kv {

void KeyValueStoreSvNull::put(std::unique_ptr<::kv::PutRequest> /*req*/) { 
}

void KeyValueStoreSvNull::get(::kv::GetResponse& /*_return*/, std::unique_ptr<::std::string> /*key*/) {  }


std::string_view KeyValueStoreAsyncProcessor::getServiceName() {
  return "KeyValueStore";
}

void KeyValueStoreAsyncProcessor::getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) {
  ::apache::thrift::detail::md::ServiceMetadata<::apache::thrift::ServiceHandler<::kv::KeyValueStore>>::gen(response);
}

void KeyValueStoreAsyncProcessor::processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, iface_, std::move(req), std::move(serializedRequest), methodMetadata, protType, context, eb, tm);
}

void KeyValueStoreAsyncProcessor::executeRequest(apache::thrift::ServerRequest&& request, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) {
  apache::thrift::detail::ap::execute(this, std::move(request), apache::thrift::detail::ServerRequestHelper::protocol(request), methodMetadata);
}

const KeyValueStoreAsyncProcessor::ProcessMap& KeyValueStoreAsyncProcessor::getOwnProcessMap() {
  return kOwnProcessMap_;
}

const KeyValueStoreAsyncProcessor::ProcessMap KeyValueStoreAsyncProcessor::kOwnProcessMap_ {
  {"put",
    {&KeyValueStoreAsyncProcessor::setUpAndProcess_put<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &KeyValueStoreAsyncProcessor::setUpAndProcess_put<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>,
     &KeyValueStoreAsyncProcessor::executeRequest_put<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &KeyValueStoreAsyncProcessor::executeRequest_put<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
  {"get",
    {&KeyValueStoreAsyncProcessor::setUpAndProcess_get<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &KeyValueStoreAsyncProcessor::setUpAndProcess_get<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>,
     &KeyValueStoreAsyncProcessor::executeRequest_get<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>,
     &KeyValueStoreAsyncProcessor::executeRequest_get<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
};

apache::thrift::ServiceRequestInfoMap const& KeyValueStoreServiceInfoHolder::requestInfoMap() const {
  static folly::Indestructible<apache::thrift::ServiceRequestInfoMap> requestInfoMap{staticRequestInfoMap()};
  return *requestInfoMap;
}

apache::thrift::ServiceRequestInfoMap KeyValueStoreServiceInfoHolder::staticRequestInfoMap() {
  apache::thrift::ServiceRequestInfoMap requestInfoMap = {
  {"put",
    { false,
     apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
     "KeyValueStore.put",
     std::nullopt,
     apache::thrift::concurrency::NORMAL,
     std::nullopt}},
  {"get",
    { false,
     apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
     "KeyValueStore.get",
     std::nullopt,
     apache::thrift::concurrency::NORMAL,
     std::nullopt}},
  };

  return requestInfoMap;
}
} // namespace kv

namespace apache::thrift::detail {
::folly::Range<const ::std::string_view*>(*TSchemaAssociation<::kv::KeyValueStore, false>::bundle)() =
    nullptr;
}
